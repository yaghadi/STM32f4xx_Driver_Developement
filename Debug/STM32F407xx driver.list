
STM32F407xx driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fe4  08000fe4  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fe4  08000fe4  00002030  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe4  08000fe4  00002030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe4  08000fe4  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe4  08000fe4  00001fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe8  08000fe8  00001fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08000fec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002030  2**0
                  CONTENTS
 10 .bss          00000064  20000030  20000030  00002030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00002030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001992  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000068a  00000000  00000000  000039f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00004080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000167  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034b4  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000025aa  00000000  00000000  00007883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b475  00000000  00000000  00009e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000152a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006f8  00000000  00000000  000152e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000159e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fcc 	.word	0x08000fcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08000fcc 	.word	0x08000fcc

080001c8 <GPIO_PClk_Control>:


/*
 * GPIO Clock Enable API
 * */
void GPIO_PClk_Control(GPIO_RegDef_t *pGPIOx,uint8_t EnOrDi){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi){
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d06e      	beq.n	80002b8 <GPIO_PClk_Control+0xf0>
		if(pGPIOx==GPIOA){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a70      	ldr	r2, [pc, #448]	@ (80003a0 <GPIO_PClk_Control+0x1d8>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d105      	bne.n	80001ee <GPIO_PClk_Control+0x26>
			GPIOA_PCLK_EN();
 80001e2:	4b70      	ldr	r3, [pc, #448]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a6f      	ldr	r2, [pc, #444]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOB){
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a6d      	ldr	r2, [pc, #436]	@ (80003a8 <GPIO_PClk_Control+0x1e0>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d105      	bne.n	8000202 <GPIO_PClk_Control+0x3a>
					GPIOB_PCLK_EN();
 80001f6:	4b6b      	ldr	r3, [pc, #428]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	4a6a      	ldr	r2, [pc, #424]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOC){
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4a69      	ldr	r2, [pc, #420]	@ (80003ac <GPIO_PClk_Control+0x1e4>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d105      	bne.n	8000216 <GPIO_PClk_Control+0x4e>
					GPIOC_PCLK_EN();
 800020a:	4b66      	ldr	r3, [pc, #408]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a65      	ldr	r2, [pc, #404]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOD){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a65      	ldr	r2, [pc, #404]	@ (80003b0 <GPIO_PClk_Control+0x1e8>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d105      	bne.n	800022a <GPIO_PClk_Control+0x62>
					GPIOD_PCLK_EN();
 800021e:	4b61      	ldr	r3, [pc, #388]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a60      	ldr	r2, [pc, #384]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000224:	f043 0308 	orr.w	r3, r3, #8
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOE){
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a61      	ldr	r2, [pc, #388]	@ (80003b4 <GPIO_PClk_Control+0x1ec>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d105      	bne.n	800023e <GPIO_PClk_Control+0x76>
					GPIOE_PCLK_EN();
 8000232:	4b5c      	ldr	r3, [pc, #368]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000236:	4a5b      	ldr	r2, [pc, #364]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000238:	f043 0310 	orr.w	r3, r3, #16
 800023c:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOF){
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a5d      	ldr	r2, [pc, #372]	@ (80003b8 <GPIO_PClk_Control+0x1f0>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d105      	bne.n	8000252 <GPIO_PClk_Control+0x8a>
					GPIOF_PCLK_EN();
 8000246:	4b57      	ldr	r3, [pc, #348]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	4a56      	ldr	r2, [pc, #344]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOG){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a59      	ldr	r2, [pc, #356]	@ (80003bc <GPIO_PClk_Control+0x1f4>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d105      	bne.n	8000266 <GPIO_PClk_Control+0x9e>
					GPIOG_PCLK_EN();
 800025a:	4b52      	ldr	r3, [pc, #328]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	4a51      	ldr	r2, [pc, #324]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000264:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOH){
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a55      	ldr	r2, [pc, #340]	@ (80003c0 <GPIO_PClk_Control+0x1f8>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d105      	bne.n	800027a <GPIO_PClk_Control+0xb2>
					GPIOH_PCLK_EN();
 800026e:	4b4d      	ldr	r3, [pc, #308]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000272:	4a4c      	ldr	r2, [pc, #304]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000278:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOI){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a51      	ldr	r2, [pc, #324]	@ (80003c4 <GPIO_PClk_Control+0x1fc>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d105      	bne.n	800028e <GPIO_PClk_Control+0xc6>
					GPIOI_PCLK_EN();
 8000282:	4b48      	ldr	r3, [pc, #288]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	4a47      	ldr	r2, [pc, #284]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028c:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOJ){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4d      	ldr	r2, [pc, #308]	@ (80003c8 <GPIO_PClk_Control+0x200>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d105      	bne.n	80002a2 <GPIO_PClk_Control+0xda>
					GPIOJ_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800029c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002a0:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOK){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a49      	ldr	r2, [pc, #292]	@ (80003cc <GPIO_PClk_Control+0x204>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d174      	bne.n	8000394 <GPIO_PClk_Control+0x1cc>
					GPIOK_PCLK_EN();
 80002aa:	4b3e      	ldr	r3, [pc, #248]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ae:	4a3d      	ldr	r2, [pc, #244]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002b4:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOK){
					GPIOK_PCLK_DI();
		}

	}
}
 80002b6:	e06d      	b.n	8000394 <GPIO_PClk_Control+0x1cc>
		if(pGPIOx==GPIOA){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a39      	ldr	r2, [pc, #228]	@ (80003a0 <GPIO_PClk_Control+0x1d8>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d105      	bne.n	80002cc <GPIO_PClk_Control+0x104>
					GPIOA_PCLK_DI();
 80002c0:	4b38      	ldr	r3, [pc, #224]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c4:	4a37      	ldr	r2, [pc, #220]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002c6:	f023 0301 	bic.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOB){
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a36      	ldr	r2, [pc, #216]	@ (80003a8 <GPIO_PClk_Control+0x1e0>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d105      	bne.n	80002e0 <GPIO_PClk_Control+0x118>
					GPIOB_PCLK_DI();
 80002d4:	4b33      	ldr	r3, [pc, #204]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a32      	ldr	r2, [pc, #200]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002da:	f023 0302 	bic.w	r3, r3, #2
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOC){
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a32      	ldr	r2, [pc, #200]	@ (80003ac <GPIO_PClk_Control+0x1e4>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d105      	bne.n	80002f4 <GPIO_PClk_Control+0x12c>
					GPIOC_PCLK_DI();
 80002e8:	4b2e      	ldr	r3, [pc, #184]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ec:	4a2d      	ldr	r2, [pc, #180]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002ee:	f023 0304 	bic.w	r3, r3, #4
 80002f2:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOD){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a2e      	ldr	r2, [pc, #184]	@ (80003b0 <GPIO_PClk_Control+0x1e8>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d105      	bne.n	8000308 <GPIO_PClk_Control+0x140>
					GPIOD_PCLK_DI();
 80002fc:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000300:	4a28      	ldr	r2, [pc, #160]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000302:	f023 0308 	bic.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOE){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a2a      	ldr	r2, [pc, #168]	@ (80003b4 <GPIO_PClk_Control+0x1ec>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d105      	bne.n	800031c <GPIO_PClk_Control+0x154>
					GPIOE_PCLK_DI();
 8000310:	4b24      	ldr	r3, [pc, #144]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a23      	ldr	r2, [pc, #140]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000316:	f023 0310 	bic.w	r3, r3, #16
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOF){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a26      	ldr	r2, [pc, #152]	@ (80003b8 <GPIO_PClk_Control+0x1f0>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d105      	bne.n	8000330 <GPIO_PClk_Control+0x168>
					GPIOF_PCLK_DI();
 8000324:	4b1f      	ldr	r3, [pc, #124]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a1e      	ldr	r2, [pc, #120]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800032a:	f023 0320 	bic.w	r3, r3, #32
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOG){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a22      	ldr	r2, [pc, #136]	@ (80003bc <GPIO_PClk_Control+0x1f4>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d105      	bne.n	8000344 <GPIO_PClk_Control+0x17c>
					GPIOG_PCLK_DI();
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a19      	ldr	r2, [pc, #100]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800033e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOH){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <GPIO_PClk_Control+0x1f8>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d105      	bne.n	8000358 <GPIO_PClk_Control+0x190>
					GPIOH_PCLK_DI();
 800034c:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a14      	ldr	r2, [pc, #80]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOI){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a1a      	ldr	r2, [pc, #104]	@ (80003c4 <GPIO_PClk_Control+0x1fc>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d105      	bne.n	800036c <GPIO_PClk_Control+0x1a4>
					GPIOI_PCLK_DI();
 8000360:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a0f      	ldr	r2, [pc, #60]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000366:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOJ){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a16      	ldr	r2, [pc, #88]	@ (80003c8 <GPIO_PClk_Control+0x200>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d105      	bne.n	8000380 <GPIO_PClk_Control+0x1b8>
					GPIOJ_PCLK_DI();
 8000374:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000378:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800037a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800037e:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOK){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a12      	ldr	r2, [pc, #72]	@ (80003cc <GPIO_PClk_Control+0x204>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PClk_Control+0x1cc>
					GPIOK_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	@ (80003a4 <GPIO_PClk_Control+0x1dc>)
 800038e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000
 80003c8:	40022400 	.word	0x40022400
 80003cc:	40022800 	.word	0x40022800

080003d0 <GPIO_Init>:
///////////////////////////////////////////////////////////////////////

////////////// Initialization of GPIO_Init ////////////////
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	GPIO_PClk_Control(pGPIO_Handle->pGPIOx, ENABLE);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fef2 	bl	80001c8 <GPIO_PClk_Control>

	uint32_t temp=0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
	//configure the mode of gpio pin
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode<GPIO_MODE_AN){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d822      	bhi.n	8000436 <GPIO_Init+0x66>
		temp=((pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber )));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	795b      	ldrb	r3, [r3, #5]
 80003f4:	461a      	mov	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	791b      	ldrb	r3, [r3, #4]
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER &= ~(0x3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	791b      	ldrb	r3, [r3, #4]
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	2103      	movs	r1, #3
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	43db      	mvns	r3, r3
 8000416:	4619      	mov	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	400a      	ands	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= temp;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6819      	ldr	r1, [r3, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	697a      	ldr	r2, [r7, #20]
 800042c:	430a      	orrs	r2, r1
 800042e:	601a      	str	r2, [r3, #0]
		temp=0;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	e0cb      	b.n	80005ce <GPIO_Init+0x1fe>
	}else{
		if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_FT){
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	795b      	ldrb	r3, [r3, #5]
 800043a:	2b04      	cmp	r3, #4
 800043c:	d117      	bne.n	800046e <GPIO_Init+0x9e>
			//setting FTSR;
			EXTI->FTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800043e:	4b4e      	ldr	r3, [pc, #312]	@ (8000578 <GPIO_Init+0x1a8>)
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7912      	ldrb	r2, [r2, #4]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	4611      	mov	r1, r2
 800044e:	4a4a      	ldr	r2, [pc, #296]	@ (8000578 <GPIO_Init+0x1a8>)
 8000450:	430b      	orrs	r3, r1
 8000452:	60d3      	str	r3, [r2, #12]
			//clearing RTSR;
			EXTI->RTSR &= ~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000454:	4b48      	ldr	r3, [pc, #288]	@ (8000578 <GPIO_Init+0x1a8>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	43d2      	mvns	r2, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a44      	ldr	r2, [pc, #272]	@ (8000578 <GPIO_Init+0x1a8>)
 8000468:	400b      	ands	r3, r1
 800046a:	6093      	str	r3, [r2, #8]
 800046c:	e035      	b.n	80004da <GPIO_Init+0x10a>
		}else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_RT){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	2b05      	cmp	r3, #5
 8000474:	d117      	bne.n	80004a6 <GPIO_Init+0xd6>
			EXTI->RTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000476:	4b40      	ldr	r3, [pc, #256]	@ (8000578 <GPIO_Init+0x1a8>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7912      	ldrb	r2, [r2, #4]
 800047e:	4611      	mov	r1, r2
 8000480:	2201      	movs	r2, #1
 8000482:	408a      	lsls	r2, r1
 8000484:	4611      	mov	r1, r2
 8000486:	4a3c      	ldr	r2, [pc, #240]	@ (8000578 <GPIO_Init+0x1a8>)
 8000488:	430b      	orrs	r3, r1
 800048a:	6093      	str	r3, [r2, #8]
			//clearing RTSR;
			EXTI->FTSR &= ~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800048c:	4b3a      	ldr	r3, [pc, #232]	@ (8000578 <GPIO_Init+0x1a8>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7912      	ldrb	r2, [r2, #4]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	43d2      	mvns	r2, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a36      	ldr	r2, [pc, #216]	@ (8000578 <GPIO_Init+0x1a8>)
 80004a0:	400b      	ands	r3, r1
 80004a2:	60d3      	str	r3, [r2, #12]
 80004a4:	e019      	b.n	80004da <GPIO_Init+0x10a>
		}else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_FRT){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	795b      	ldrb	r3, [r3, #5]
 80004aa:	2b06      	cmp	r3, #6
 80004ac:	d115      	bne.n	80004da <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b32      	ldr	r3, [pc, #200]	@ (8000578 <GPIO_Init+0x1a8>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a2e      	ldr	r2, [pc, #184]	@ (8000578 <GPIO_Init+0x1a8>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
			//clearing RTSR;
			EXTI->RTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000578 <GPIO_Init+0x1a8>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	7912      	ldrb	r2, [r2, #4]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a28      	ldr	r2, [pc, #160]	@ (8000578 <GPIO_Init+0x1a8>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6093      	str	r3, [r2, #8]
		}
		//configure GPIO port selection in SYSCFG_EXITCR
		uint8_t temp1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber/4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	089b      	lsrs	r3, r3, #2
 80004e0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber%4;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	f003 0303 	and.w	r3, r3, #3
 80004ea:	74bb      	strb	r3, [r7, #18]
		SYSCFG_PCLK_EN();
 80004ec:	4b23      	ldr	r3, [pc, #140]	@ (800057c <GPIO_Init+0x1ac>)
 80004ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004f0:	4a22      	ldr	r2, [pc, #136]	@ (800057c <GPIO_Init+0x1ac>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004f6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1]=(portCode(pGPIO_Handle->pGPIOx) << (temp2*4));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a20      	ldr	r2, [pc, #128]	@ (8000580 <GPIO_Init+0x1b0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d050      	beq.n	80005a4 <GPIO_Init+0x1d4>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a1f      	ldr	r2, [pc, #124]	@ (8000584 <GPIO_Init+0x1b4>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d032      	beq.n	8000572 <GPIO_Init+0x1a2>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1d      	ldr	r2, [pc, #116]	@ (8000588 <GPIO_Init+0x1b8>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d02b      	beq.n	800056e <GPIO_Init+0x19e>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <GPIO_Init+0x1bc>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d024      	beq.n	800056a <GPIO_Init+0x19a>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <GPIO_Init+0x1c0>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d01d      	beq.n	8000566 <GPIO_Init+0x196>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a19      	ldr	r2, [pc, #100]	@ (8000594 <GPIO_Init+0x1c4>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d016      	beq.n	8000562 <GPIO_Init+0x192>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a17      	ldr	r2, [pc, #92]	@ (8000598 <GPIO_Init+0x1c8>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d00f      	beq.n	800055e <GPIO_Init+0x18e>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a16      	ldr	r2, [pc, #88]	@ (800059c <GPIO_Init+0x1cc>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d008      	beq.n	800055a <GPIO_Init+0x18a>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <GPIO_Init+0x1d0>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d101      	bne.n	8000556 <GPIO_Init+0x186>
 8000552:	2308      	movs	r3, #8
 8000554:	e027      	b.n	80005a6 <GPIO_Init+0x1d6>
 8000556:	2300      	movs	r3, #0
 8000558:	e025      	b.n	80005a6 <GPIO_Init+0x1d6>
 800055a:	2307      	movs	r3, #7
 800055c:	e023      	b.n	80005a6 <GPIO_Init+0x1d6>
 800055e:	2306      	movs	r3, #6
 8000560:	e021      	b.n	80005a6 <GPIO_Init+0x1d6>
 8000562:	2305      	movs	r3, #5
 8000564:	e01f      	b.n	80005a6 <GPIO_Init+0x1d6>
 8000566:	2304      	movs	r3, #4
 8000568:	e01d      	b.n	80005a6 <GPIO_Init+0x1d6>
 800056a:	2303      	movs	r3, #3
 800056c:	e01b      	b.n	80005a6 <GPIO_Init+0x1d6>
 800056e:	2302      	movs	r3, #2
 8000570:	e019      	b.n	80005a6 <GPIO_Init+0x1d6>
 8000572:	2301      	movs	r3, #1
 8000574:	e017      	b.n	80005a6 <GPIO_Init+0x1d6>
 8000576:	bf00      	nop
 8000578:	40013c00 	.word	0x40013c00
 800057c:	40023800 	.word	0x40023800
 8000580:	40020000 	.word	0x40020000
 8000584:	40020400 	.word	0x40020400
 8000588:	40020800 	.word	0x40020800
 800058c:	40020c00 	.word	0x40020c00
 8000590:	40021000 	.word	0x40021000
 8000594:	40021400 	.word	0x40021400
 8000598:	40021800 	.word	0x40021800
 800059c:	40021c00 	.word	0x40021c00
 80005a0:	40022000 	.word	0x40022000
 80005a4:	2300      	movs	r3, #0
 80005a6:	7cba      	ldrb	r2, [r7, #18]
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	fa03 f102 	lsl.w	r1, r3, r2
 80005ae:	4a57      	ldr	r2, [pc, #348]	@ (800070c <GPIO_Init+0x33c>)
 80005b0:	7cfb      	ldrb	r3, [r7, #19]
 80005b2:	3302      	adds	r3, #2
 80005b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	4b55      	ldr	r3, [pc, #340]	@ (8000710 <GPIO_Init+0x340>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7912      	ldrb	r2, [r2, #4]
 80005c0:	4611      	mov	r1, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	408a      	lsls	r2, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a51      	ldr	r2, [pc, #324]	@ (8000710 <GPIO_Init+0x340>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6013      	str	r3, [r2, #0]
	}
	//configure the speed
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	799b      	ldrb	r3, [r3, #6]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	609a      	str	r2, [r3, #8]
	temp=0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	//configure the pupd setting
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	79db      	ldrb	r3, [r3, #7]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68da      	ldr	r2, [r3, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	2103      	movs	r1, #3
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68d9      	ldr	r1, [r3, #12]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	430a      	orrs	r2, r1
 8000650:	60da      	str	r2, [r3, #12]
	temp=0;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
	//configure the optype
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7a1b      	ldrb	r3, [r3, #8]
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	4619      	mov	r1, r3
 8000672:	2301      	movs	r3, #1
 8000674:	408b      	lsls	r3, r1
 8000676:	43db      	mvns	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6859      	ldr	r1, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	430a      	orrs	r2, r1
 8000690:	605a      	str	r2, [r3, #4]
	temp=0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
	//configure the alt functionality
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_AF){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a5b      	ldrb	r3, [r3, #9]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d132      	bne.n	8000704 <GPIO_Init+0x334>
		uint32_t temp1,temp2;
		temp1=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	60fb      	str	r3, [r7, #12]
		temp2=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	f003 0307 	and.w	r3, r3, #7
 80006b0:	60bb      	str	r3, [r7, #8]
		pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xf << (4*temp2));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	3208      	adds	r2, #8
 80006ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	210f      	movs	r1, #15
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4011      	ands	r1, r2
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	3208      	adds	r2, #8
 80006d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[temp1] |= ((pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4* temp2));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	3208      	adds	r2, #8
 80006e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4311      	orrs	r1, r2
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	3208      	adds	r2, #8
 8000700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40013800 	.word	0x40013800
 8000710:	40013c00 	.word	0x40013c00

08000714 <GPIO_ReadFromInputPin>:
	}
}
//////////////////////////////////////////////////////////////////////
/*Function implementation to read input from pin
 * */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t pinNumber){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	return((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	fa22 f303 	lsr.w	r3, r2, r3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3

}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <I2C_PeriClockControl>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
/*
 * Peripheral Clock setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi){
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d01e      	beq.n	8000790 <I2C_PeriClockControl+0x50>
			if(pI2Cx==I2C1){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <I2C_PeriClockControl+0x98>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d105      	bne.n	8000766 <I2C_PeriClockControl+0x26>
						I2C1_PCLK_EN();
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000764:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if(pI2Cx==I2C2){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <I2C_PeriClockControl+0xa0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d105      	bne.n	800077a <I2C_PeriClockControl+0x3a>
						I2C2_PCLK_EN();
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 8000774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000778:	6413      	str	r3, [r2, #64]	@ 0x40
					}
			if(pI2Cx==I2C3){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <I2C_PeriClockControl+0xa4>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d124      	bne.n	80007cc <I2C_PeriClockControl+0x8c>
						I2C3_PCLK_EN();
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 8000788:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800078c:	6413      	str	r3, [r2, #64]	@ 0x40
							}
					if(pI2Cx==I2C3){
								I2C3_PCLK_DI();
							}
		}
}
 800078e:	e01d      	b.n	80007cc <I2C_PeriClockControl+0x8c>
			if(pI2Cx==I2C1){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <I2C_PeriClockControl+0x98>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d105      	bne.n	80007a4 <I2C_PeriClockControl+0x64>
						I2C1_PCLK_DI();
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a0f      	ldr	r2, [pc, #60]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 800079e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
					if(pI2Cx==I2C2){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <I2C_PeriClockControl+0xa0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d105      	bne.n	80007b8 <I2C_PeriClockControl+0x78>
								I2C2_PCLK_DI();
 80007ac:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 80007b2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
					if(pI2Cx==I2C3){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <I2C_PeriClockControl+0xa4>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <I2C_PeriClockControl+0x8c>
								I2C3_PCLK_DI();
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <I2C_PeriClockControl+0x9c>)
 80007c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40005400 	.word	0x40005400
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40005800 	.word	0x40005800
 80007e4:	40005c00 	.word	0x40005c00

080007e8 <I2C_Init>:

/*
 * Init and De-init
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

	//Enable clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffa0 	bl	8000740 <I2C_PeriClockControl>
	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	029b      	lsls	r3, r3, #10
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	4313      	orrs	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	601a      	str	r2, [r3, #0]
	//configure the FREQ field of CR2
	tempreg=0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCKL1Value()/1000000U);
 8000818:	f000 fa76 	bl	8000d08 <RCC_GetPCKL1Value>
 800081c:	4603      	mov	r3, r0
 800081e:	4a50      	ldr	r2, [pc, #320]	@ (8000960 <I2C_Init+0x178>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	0c9b      	lsrs	r3, r3, #18
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6859      	ldr	r1, [r3, #4]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	430a      	orrs	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
	//program the device own address
	tempreg=0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress <<1);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a1b      	ldrb	r3, [r3, #8]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000856:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6899      	ldr	r1, [r3, #8]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	430a      	orrs	r2, r1
 8000866:	609a      	str	r2, [r3, #8]
	//CCR Calculations
	uint16_t CCR_Value =0;
 8000868:	2300      	movs	r3, #0
 800086a:	817b      	strh	r3, [r7, #10]
	tempreg=0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	4a3b      	ldr	r2, [pc, #236]	@ (8000964 <I2C_Init+0x17c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d80f      	bhi.n	800089a <I2C_Init+0xb2>
		//standard Mode
		CCR_Value=(RCC_GetPCKL1Value()/(2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ));
 800087a:	f000 fa45 	bl	8000d08 <RCC_GetPCKL1Value>
 800087e:	4602      	mov	r2, r0
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fbb2 f3f3 	udiv	r3, r2, r3
 800088a:	817b      	strh	r3, [r7, #10]
		tempreg |= (CCR_Value & 0xFFF);
 800088c:	897b      	ldrh	r3, [r7, #10]
 800088e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4313      	orrs	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e02c      	b.n	80008f4 <I2C_Init+0x10c>
	}else{
		tempreg |= (1<<15);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008a0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7a9b      	ldrb	r3, [r3, #10]
 80008a6:	039b      	lsls	r3, r3, #14
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
		//Fast Mode
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7a9b      	ldrb	r3, [r3, #10]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10b      	bne.n	80008ce <I2C_Init+0xe6>
			CCR_Value=(RCC_GetPCKL1Value()/(3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ));
 80008b6:	f000 fa27 	bl	8000d08 <RCC_GetPCKL1Value>
 80008ba:	4601      	mov	r1, r0
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80008ca:	817b      	strh	r3, [r7, #10]
 80008cc:	e00c      	b.n	80008e8 <I2C_Init+0x100>
		}else{
			CCR_Value=(RCC_GetPCKL1Value()/(25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ));
 80008ce:	f000 fa1b 	bl	8000d08 <RCC_GetPCKL1Value>
 80008d2:	4601      	mov	r1, r0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	009a      	lsls	r2, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80008e6:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (CCR_Value & 0xFFF);
 80008e8:	897b      	ldrh	r3, [r7, #10]
 80008ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69d9      	ldr	r1, [r3, #28]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	430a      	orrs	r2, r1
 8000902:	61da      	str	r2, [r3, #28]
	tempreg =0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
	//trise Confifuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <I2C_Init+0x17c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d809      	bhi.n	8000926 <I2C_Init+0x13e>
		//standard Mode
		tempreg = (RCC_GetPCKL1Value()/1000000U)+1;
 8000912:	f000 f9f9 	bl	8000d08 <RCC_GetPCKL1Value>
 8000916:	4603      	mov	r3, r0
 8000918:	4a11      	ldr	r2, [pc, #68]	@ (8000960 <I2C_Init+0x178>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e00d      	b.n	8000942 <I2C_Init+0x15a>
	}else{
		//Fast Mode
		tempreg = ((RCC_GetPCKL1Value()*300)/1000000000U)+1;
 8000926:	f000 f9ef 	bl	8000d08 <RCC_GetPCKL1Value>
 800092a:	4603      	mov	r3, r0
 800092c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	0a5b      	lsrs	r3, r3, #9
 8000936:	4a0c      	ldr	r2, [pc, #48]	@ (8000968 <I2C_Init+0x180>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	09db      	lsrs	r3, r3, #7
 800093e:	3301      	adds	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6a19      	ldr	r1, [r3, #32]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	430a      	orrs	r2, r1
 8000954:	621a      	str	r2, [r3, #32]
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	431bde83 	.word	0x431bde83
 8000964:	000186a0 	.word	0x000186a0
 8000968:	00044b83 	.word	0x00044b83

0800096c <I2C_GetFlagStatus>:


/*
 * Data Send and Receive
 */
static uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx,uint8_t flagName){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
	if(pI2Cx->SR1 & flagName){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	4013      	ands	r3, r2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <I2C_GetFlagStatus+0x1c>
		return FLAG_SET;
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <I2C_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01f      	beq.n	8000a0c <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7f1b      	ldrb	r3, [r3, #28]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d112      	bne.n	80009fa <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d11f      	bne.n	8000a1c <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ControlACKing(pI2CHandle->pI2Cx,DISABLE);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f85a 	bl	8000a9c <I2C_ControlACKing>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80009f8:	e010      	b.n	8000a1c <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	60fb      	str	r3, [r7, #12]
}
 8000a0a:	e007      	b.n	8000a1c <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	60fb      	str	r3, [r7, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <I2C_GenerateStopCondition>:
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a5e:	78fa      	ldrb	r2, [r7, #3]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	611a      	str	r2, [r3, #16]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a8a:	78fa      	ldrb	r2, [r7, #3]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	611a      	str	r2, [r3, #16]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <I2C_ControlACKing>:
void I2C_ControlACKing(I2C_RegDef_t *pI2Cx,uint8_t EnOrDi){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi){
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <I2C_ControlACKing+0x20>
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}else{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 8000aba:	e005      	b.n	8000ac8 <I2C_ControlACKing+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <I2C_MasterSendData>:
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	70fb      	strb	r3, [r7, #3]

	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff55 	bl	8000996 <I2C_GenerateStartCondition>

	//Complete the start generation is completed by checking the SB flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8000aec:	bf00      	nop
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff39 	bl	800096c <I2C_GetFlagStatus>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f6      	beq.n	8000aee <I2C_MasterSendData+0x1a>
	//Send the address of the slave with r/nw bit set to W(0) (total 8bit)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	78fa      	ldrb	r2, [r7, #3]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff9b 	bl	8000a44 <I2C_ExecuteAddressPhaseWrite>
	//confirm the address phase is completed by checking the ADDR flag bit in the SR1 register
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8000b0e:	bf00      	nop
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff28 	bl	800096c <I2C_GetFlagStatus>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f6      	beq.n	8000b10 <I2C_MasterSendData+0x3c>

	//clear ADDR flag according to its software sequence
	I2C_ClearADDRFlag(pI2CHandle);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff ff47 	bl	80009b6 <I2C_ClearADDRFlag>

	//Send the data until the len become 0
	while(Len >0){
 8000b28:	e014      	b.n	8000b54 <I2C_MasterSendData+0x80>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));//wait until txe is set
 8000b2a:	bf00      	nop
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff1a 	bl	800096c <I2C_GetFlagStatus>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f6      	beq.n	8000b2c <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR =*pTxbuffer;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
	while(Len >0){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1e7      	bne.n	8000b2a <I2C_MasterSendData+0x56>
	}

	//when len become 0 wait for TXE=1 and BTF=1 Before generating the stop condition
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000b5a:	bf00      	nop
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff02 	bl	800096c <I2C_GetFlagStatus>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f6      	beq.n	8000b5c <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8000b6e:	bf00      	nop
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2104      	movs	r1, #4
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fef8 	bl	800096c <I2C_GetFlagStatus>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f6      	beq.n	8000b70 <I2C_MasterSendData+0x9c>

	//Generate Stop Condition
	if(Sr==I2C_DISABLE_SR)
 8000b82:	7e3b      	ldrb	r3, [r7, #24]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff49 	bl	8000a24 <I2C_GenerateStopCondition>


}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]


	//Generate Start Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff feee 	bl	8000996 <I2C_GenerateStartCondition>


	//Complete the start generation is completed by checking the SB flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8000bba:	bf00      	nop
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fed2 	bl	800096c <I2C_GetFlagStatus>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f6      	beq.n	8000bbc <I2C_MasterReceiveData+0x22>

	//Send the address of the slave with r/nw bit set to W(1) (total 8bit)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	79ba      	ldrb	r2, [r7, #6]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff4a 	bl	8000a70 <I2C_ExecuteAddressPhaseRead>
	//confirm the address phase is completed by checking the ADDR flag bit in the SR1 register
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8000bdc:	bf00      	nop
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2102      	movs	r1, #2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fec1 	bl	800096c <I2C_GetFlagStatus>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f6      	beq.n	8000bde <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len==1){
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d121      	bne.n	8000c3a <I2C_MasterReceiveData+0xa0>
		//disable Acking
		I2C_ControlACKing(pI2CHandle->pI2Cx, DISABLE);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff4d 	bl	8000a9c <I2C_ControlACKing>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fed7 	bl	80009b6 <I2C_ClearADDRFlag>
		//wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8000c08:	bf00      	nop
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2140      	movs	r1, #64	@ 0x40
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff feab 	bl	800096c <I2C_GetFlagStatus>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f6      	beq.n	8000c0a <I2C_MasterReceiveData+0x70>
		//generate STOP Condition
		if(Sr==I2C_DISABLE_SR)
 8000c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d104      	bne.n	8000c2e <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fefb 	bl	8000a24 <I2C_GenerateStopCondition>
		//read data in to buffer
		*pRxBuffer=pI2CHandle->pI2Cx->DR;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	701a      	strb	r2, [r3, #0]
	}
	//procedure to read data from slave when len >1
	if(Len >1){
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d930      	bls.n	8000ca2 <I2C_MasterReceiveData+0x108>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff feb8 	bl	80009b6 <I2C_ClearADDRFlag>
		//read the data until Len becomes zero
		for(uint32_t i=Len ;i>0;i--){
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e027      	b.n	8000c9c <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8000c4c:	bf00      	nop
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2140      	movs	r1, #64	@ 0x40
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe89 	bl	800096c <I2C_GetFlagStatus>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f6      	beq.n	8000c4e <I2C_MasterReceiveData+0xb4>
			if(i==2){//if last 2 bytes are remaining
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d10e      	bne.n	8000c84 <I2C_MasterReceiveData+0xea>
				//clear the ack bit
				I2C_ControlACKing(pI2CHandle->pI2Cx, DISABLE);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff15 	bl	8000a9c <I2C_ControlACKing>
				//generate STOP condition
				if(Sr==I2C_DISABLE_SR)
 8000c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d104      	bne.n	8000c84 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fed0 	bl	8000a24 <I2C_GenerateStopCondition>
			}
			//read the data from register in to buffer
			*pRxBuffer=pI2CHandle->pI2Cx->DR;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=Len ;i>0;i--){
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1d4      	bne.n	8000c4c <I2C_MasterReceiveData+0xb2>
		}
	}
	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl==I2C_ACK_ENABLE){
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	7a5b      	ldrb	r3, [r3, #9]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d105      	bne.n	8000cb6 <I2C_MasterReceiveData+0x11c>
		I2C_ControlACKing(pI2CHandle->pI2Cx, ENABLE);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fef3 	bl	8000a9c <I2C_ControlACKing>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <I2C_PeripheralControl>:
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
	}
}

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi){
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f043 0201 	orr.w	r2, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000cdc:	e005      	b.n	8000cea <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 0201 	bic.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <RCC_GetPLLOutputClock>:

uint32_t AHB_PreScalers[8]={2,4,8,16,64,128,256,512};
uint32_t APB1_PreScalers[4]={2,4,8,16};
uint32_t APB2_PreScalers[4]={2,4,8,16};

uint32_t RCC_GetPLLOutputClock(void){
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

	return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <RCC_GetPCKL1Value>:
uint32_t RCC_GetPCKL1Value(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
	uint32_t pckl,SystemCKL;
	uint8_t cklsrc,ahbp,temp,apb1p;
	//Clock source extraction
	cklsrc = ((RCC->CFGR >> 2) & 0x3);
 8000d0e:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <RCC_GetPCKL1Value+0xa0>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	727b      	strb	r3, [r7, #9]
	if(cklsrc==0){
 8000d1c:	7a7b      	ldrb	r3, [r7, #9]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <RCC_GetPCKL1Value+0x20>
		SystemCKL=16000000;
 8000d22:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <RCC_GetPCKL1Value+0xa4>)
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e00b      	b.n	8000d40 <RCC_GetPCKL1Value+0x38>
	}else if(cklsrc==1){
 8000d28:	7a7b      	ldrb	r3, [r7, #9]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d102      	bne.n	8000d34 <RCC_GetPCKL1Value+0x2c>
		SystemCKL=8000000;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <RCC_GetPCKL1Value+0xa8>)
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e005      	b.n	8000d40 <RCC_GetPCKL1Value+0x38>
	}else if(cklsrc==2){
 8000d34:	7a7b      	ldrb	r3, [r7, #9]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d102      	bne.n	8000d40 <RCC_GetPCKL1Value+0x38>
		SystemCKL=RCC_GetPLLOutputClock();
 8000d3a:	f7ff ffdc 	bl	8000cf6 <RCC_GetPLLOutputClock>
 8000d3e:	60f8      	str	r0, [r7, #12]
	}
	//AHB Prescaler extraction
	temp =((RCC->CFGR >> 4) & 0xF);
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <RCC_GetPCKL1Value+0xa0>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 8000d4e:	7a3b      	ldrb	r3, [r7, #8]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d802      	bhi.n	8000d5a <RCC_GetPCKL1Value+0x52>
		ahbp=1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	72fb      	strb	r3, [r7, #11]
 8000d58:	e005      	b.n	8000d66 <RCC_GetPCKL1Value+0x5e>
	}else{
		ahbp=AHB_PreScalers[temp-8];
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	3b08      	subs	r3, #8
 8000d5e:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <RCC_GetPCKL1Value+0xac>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	72fb      	strb	r3, [r7, #11]
	}
	//APB1 Prescaler extraction
	temp =((RCC->CFGR >> 10) & 0x7);
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <RCC_GetPCKL1Value+0xa0>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	0a9b      	lsrs	r3, r3, #10
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	723b      	strb	r3, [r7, #8]
	if(temp < 4){
 8000d74:	7a3b      	ldrb	r3, [r7, #8]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d802      	bhi.n	8000d80 <RCC_GetPCKL1Value+0x78>
		apb1p=1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	72bb      	strb	r3, [r7, #10]
 8000d7e:	e005      	b.n	8000d8c <RCC_GetPCKL1Value+0x84>
	}else{
		apb1p=APB1_PreScalers[temp-4];
 8000d80:	7a3b      	ldrb	r3, [r7, #8]
 8000d82:	3b04      	subs	r3, #4
 8000d84:	4a0c      	ldr	r2, [pc, #48]	@ (8000db8 <RCC_GetPCKL1Value+0xb0>)
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	72bb      	strb	r3, [r7, #10]
	}

	pckl=((SystemCKL/ahbp)/apb1p);
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d94:	7abb      	ldrb	r3, [r7, #10]
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	607b      	str	r3, [r7, #4]

	return pckl;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	00f42400 	.word	0x00f42400
 8000db0:	007a1200 	.word	0x007a1200
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000020 	.word	0x20000020

08000dbc <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	e002      	b.n	8000dce <delay+0x12>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <delay+0x28>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d9f8      	bls.n	8000dc8 <delay+0xc>
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	0003d08f 	.word	0x0003d08f

08000de8 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <I2C1_GPIOInits+0x40>)
 8000df0:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000df2:	2302      	movs	r3, #2
 8000df4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_OD;
 8000df6:	2301      	movs	r3, #1
 8000df8:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PINR_PU;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e02:	2302      	movs	r3, #2
 8000e04:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000e06:	2306      	movs	r3, #6
 8000e08:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fadf 	bl	80003d0 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fad9 	bl	80003d0 <GPIO_Init>


}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40020400 	.word	0x40020400

08000e2c <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <I2C1_Inits+0x2c>)
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <I2C1_Inits+0x30>)
 8000e34:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <I2C1_Inits+0x2c>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <I2C1_Inits+0x2c>)
 8000e3e:	2261      	movs	r2, #97	@ 0x61
 8000e40:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000e42:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <I2C1_Inits+0x2c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <I2C1_Inits+0x2c>)
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <I2C1_Inits+0x34>)
 8000e4c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000e4e:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <I2C1_Inits+0x2c>)
 8000e50:	f7ff fcca 	bl	80007e8 <I2C_Init>

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000004c 	.word	0x2000004c
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	000186a0 	.word	0x000186a0

08000e64 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <GPIO_ButtonInit+0x2c>)
 8000e6c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000e72:	2300      	movs	r3, #0
 8000e74:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e76:	2302      	movs	r3, #2
 8000e78:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PINR_NO_PUPD;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff faa5 	bl	80003d0 <GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000

08000e94 <main>:


int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 8000e9a:	f7ff ffe3 	bl	8000e64 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000e9e:	f7ff ffa3 	bl	8000de8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8000ea2:	f7ff ffc3 	bl	8000e2c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	481d      	ldr	r0, [pc, #116]	@ (8000f20 <main+0x8c>)
 8000eaa:	f7ff ff08 	bl	8000cbe <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ControlACKing(I2C1,I2C_ACK_ENABLE);
 8000eae:	2101      	movs	r1, #1
 8000eb0:	481b      	ldr	r0, [pc, #108]	@ (8000f20 <main+0x8c>)
 8000eb2:	f7ff fdf3 	bl	8000a9c <I2C_ControlACKing>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000eb6:	bf00      	nop
 8000eb8:	2100      	movs	r1, #0
 8000eba:	481a      	ldr	r0, [pc, #104]	@ (8000f24 <main+0x90>)
 8000ebc:	f7ff fc2a 	bl	8000714 <GPIO_ReadFromInputPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f8      	beq.n	8000eb8 <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000ec6:	f7ff ff79 	bl	8000dbc <delay>

		commandcode = 0x51;
 8000eca:	2351      	movs	r3, #81	@ 0x51
 8000ecc:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 8000ece:	1df9      	adds	r1, r7, #7
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2368      	movs	r3, #104	@ 0x68
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <main+0x94>)
 8000eda:	f7ff fdfb 	bl	8000ad4 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 8000ede:	1db9      	adds	r1, r7, #6
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2368      	movs	r3, #104	@ 0x68
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	480f      	ldr	r0, [pc, #60]	@ (8000f28 <main+0x94>)
 8000eea:	f7ff fe56 	bl	8000b9a <I2C_MasterReceiveData>

		commandcode = 0x52;
 8000eee:	2352      	movs	r3, #82	@ 0x52
 8000ef0:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 8000ef2:	1df9      	adds	r1, r7, #7
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2368      	movs	r3, #104	@ 0x68
 8000efa:	2201      	movs	r2, #1
 8000efc:	480a      	ldr	r0, [pc, #40]	@ (8000f28 <main+0x94>)
 8000efe:	f7ff fde9 	bl	8000ad4 <I2C_MasterSendData>


		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	2300      	movs	r3, #0
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2368      	movs	r3, #104	@ 0x68
 8000f0a:	4908      	ldr	r1, [pc, #32]	@ (8000f2c <main+0x98>)
 8000f0c:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <main+0x94>)
 8000f0e:	f7ff fe44 	bl	8000b9a <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <main+0x98>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	54d1      	strb	r1, [r2, r3]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000f1c:	e7cb      	b.n	8000eb6 <main+0x22>
 8000f1e:	bf00      	nop
 8000f20:	40005400 	.word	0x40005400
 8000f24:	40020000 	.word	0x40020000
 8000f28:	2000004c 	.word	0x2000004c
 8000f2c:	20000074 	.word	0x20000074

08000f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f5e:	f000 f811 	bl	8000f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f62:	f7ff ff97 	bl	8000e94 <main>

08000f66 <LoopForever>:

LoopForever:
  b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000f74:	08000fec 	.word	0x08000fec
  ldr r2, =_sbss
 8000f78:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000f7c:	20000094 	.word	0x20000094

08000f80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <__libc_init_array>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4d0d      	ldr	r5, [pc, #52]	@ (8000fbc <__libc_init_array+0x38>)
 8000f88:	4c0d      	ldr	r4, [pc, #52]	@ (8000fc0 <__libc_init_array+0x3c>)
 8000f8a:	1b64      	subs	r4, r4, r5
 8000f8c:	10a4      	asrs	r4, r4, #2
 8000f8e:	2600      	movs	r6, #0
 8000f90:	42a6      	cmp	r6, r4
 8000f92:	d109      	bne.n	8000fa8 <__libc_init_array+0x24>
 8000f94:	4d0b      	ldr	r5, [pc, #44]	@ (8000fc4 <__libc_init_array+0x40>)
 8000f96:	4c0c      	ldr	r4, [pc, #48]	@ (8000fc8 <__libc_init_array+0x44>)
 8000f98:	f000 f818 	bl	8000fcc <_init>
 8000f9c:	1b64      	subs	r4, r4, r5
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	42a6      	cmp	r6, r4
 8000fa4:	d105      	bne.n	8000fb2 <__libc_init_array+0x2e>
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fac:	4798      	blx	r3
 8000fae:	3601      	adds	r6, #1
 8000fb0:	e7ee      	b.n	8000f90 <__libc_init_array+0xc>
 8000fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb6:	4798      	blx	r3
 8000fb8:	3601      	adds	r6, #1
 8000fba:	e7f2      	b.n	8000fa2 <__libc_init_array+0x1e>
 8000fbc:	08000fe4 	.word	0x08000fe4
 8000fc0:	08000fe4 	.word	0x08000fe4
 8000fc4:	08000fe4 	.word	0x08000fe4
 8000fc8:	08000fe8 	.word	0x08000fe8

08000fcc <_init>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr

08000fd8 <_fini>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	bf00      	nop
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr
