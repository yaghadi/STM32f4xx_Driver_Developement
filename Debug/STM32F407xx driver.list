
STM32F407xx driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cbc  08000cbc  00002400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cbc  08000cbc  00002400  2**0
                  CONTENTS
  4 .ARM          00000008  08000cbc  08000cbc  00001cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000cc4  08000cc4  00002400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc4  08000cc4  00001cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cc8  08000cc8  00001cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08000ccc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002400  2**0
                  CONTENTS
 10 .bss          00000040  20000400  20000400  00002400  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  00002400  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013b6  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050e  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00003cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000100  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000341c  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e05  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b2c8  00000000  00000000  00009179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014441  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004dc  00000000  00000000  00014484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00014960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000400 	.word	0x20000400
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ca4 	.word	0x08000ca4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000404 	.word	0x20000404
 80001c4:	08000ca4 	.word	0x08000ca4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_PClk_Control>:


/*
 * GPIO Clock Enable API
 * */
void GPIO_PClk_Control(GPIO_RegDef_t *pGPIOx,uint8_t EnOrDi){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi){
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d06e      	beq.n	80002c8 <GPIO_PClk_Control+0xf0>
		if(pGPIOx==GPIOA){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a70      	ldr	r2, [pc, #448]	@ (80003b0 <GPIO_PClk_Control+0x1d8>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d105      	bne.n	80001fe <GPIO_PClk_Control+0x26>
			GPIOA_PCLK_EN();
 80001f2:	4b70      	ldr	r3, [pc, #448]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a6f      	ldr	r2, [pc, #444]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOB){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a6d      	ldr	r2, [pc, #436]	@ (80003b8 <GPIO_PClk_Control+0x1e0>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d105      	bne.n	8000212 <GPIO_PClk_Control+0x3a>
					GPIOB_PCLK_EN();
 8000206:	4b6b      	ldr	r3, [pc, #428]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020a:	4a6a      	ldr	r2, [pc, #424]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800020c:	f043 0302 	orr.w	r3, r3, #2
 8000210:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOC){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a69      	ldr	r2, [pc, #420]	@ (80003bc <GPIO_PClk_Control+0x1e4>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d105      	bne.n	8000226 <GPIO_PClk_Control+0x4e>
					GPIOC_PCLK_EN();
 800021a:	4b66      	ldr	r3, [pc, #408]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a65      	ldr	r2, [pc, #404]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOD){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a65      	ldr	r2, [pc, #404]	@ (80003c0 <GPIO_PClk_Control+0x1e8>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d105      	bne.n	800023a <GPIO_PClk_Control+0x62>
					GPIOD_PCLK_EN();
 800022e:	4b61      	ldr	r3, [pc, #388]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	4a60      	ldr	r2, [pc, #384]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000234:	f043 0308 	orr.w	r3, r3, #8
 8000238:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOE){
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a61      	ldr	r2, [pc, #388]	@ (80003c4 <GPIO_PClk_Control+0x1ec>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d105      	bne.n	800024e <GPIO_PClk_Control+0x76>
					GPIOE_PCLK_EN();
 8000242:	4b5c      	ldr	r3, [pc, #368]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000246:	4a5b      	ldr	r2, [pc, #364]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOF){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a5d      	ldr	r2, [pc, #372]	@ (80003c8 <GPIO_PClk_Control+0x1f0>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d105      	bne.n	8000262 <GPIO_PClk_Control+0x8a>
					GPIOF_PCLK_EN();
 8000256:	4b57      	ldr	r3, [pc, #348]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025a:	4a56      	ldr	r2, [pc, #344]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800025c:	f043 0320 	orr.w	r3, r3, #32
 8000260:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOG){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a59      	ldr	r2, [pc, #356]	@ (80003cc <GPIO_PClk_Control+0x1f4>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d105      	bne.n	8000276 <GPIO_PClk_Control+0x9e>
					GPIOG_PCLK_EN();
 800026a:	4b52      	ldr	r3, [pc, #328]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	4a51      	ldr	r2, [pc, #324]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOH){
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a55      	ldr	r2, [pc, #340]	@ (80003d0 <GPIO_PClk_Control+0x1f8>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d105      	bne.n	800028a <GPIO_PClk_Control+0xb2>
					GPIOH_PCLK_EN();
 800027e:	4b4d      	ldr	r3, [pc, #308]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000282:	4a4c      	ldr	r2, [pc, #304]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000288:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOI){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a51      	ldr	r2, [pc, #324]	@ (80003d4 <GPIO_PClk_Control+0x1fc>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d105      	bne.n	800029e <GPIO_PClk_Control+0xc6>
					GPIOI_PCLK_EN();
 8000292:	4b48      	ldr	r3, [pc, #288]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a47      	ldr	r2, [pc, #284]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOJ){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a4d      	ldr	r2, [pc, #308]	@ (80003d8 <GPIO_PClk_Control+0x200>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d105      	bne.n	80002b2 <GPIO_PClk_Control+0xda>
					GPIOJ_PCLK_EN();
 80002a6:	4b43      	ldr	r3, [pc, #268]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002aa:	4a42      	ldr	r2, [pc, #264]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002b0:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		if(pGPIOx==GPIOK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a49      	ldr	r2, [pc, #292]	@ (80003dc <GPIO_PClk_Control+0x204>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d174      	bne.n	80003a4 <GPIO_PClk_Control+0x1cc>
					GPIOK_PCLK_EN();
 80002ba:	4b3e      	ldr	r3, [pc, #248]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002be:	4a3d      	ldr	r2, [pc, #244]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c4:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOK){
					GPIOK_PCLK_DI();
		}

	}
}
 80002c6:	e06d      	b.n	80003a4 <GPIO_PClk_Control+0x1cc>
		if(pGPIOx==GPIOA){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a39      	ldr	r2, [pc, #228]	@ (80003b0 <GPIO_PClk_Control+0x1d8>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d105      	bne.n	80002dc <GPIO_PClk_Control+0x104>
					GPIOA_PCLK_DI();
 80002d0:	4b38      	ldr	r3, [pc, #224]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a37      	ldr	r2, [pc, #220]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002d6:	f023 0301 	bic.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOB){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a36      	ldr	r2, [pc, #216]	@ (80003b8 <GPIO_PClk_Control+0x1e0>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d105      	bne.n	80002f0 <GPIO_PClk_Control+0x118>
					GPIOB_PCLK_DI();
 80002e4:	4b33      	ldr	r3, [pc, #204]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a32      	ldr	r2, [pc, #200]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOC){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a32      	ldr	r2, [pc, #200]	@ (80003bc <GPIO_PClk_Control+0x1e4>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d105      	bne.n	8000304 <GPIO_PClk_Control+0x12c>
					GPIOC_PCLK_DI();
 80002f8:	4b2e      	ldr	r3, [pc, #184]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	4a2d      	ldr	r2, [pc, #180]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 80002fe:	f023 0304 	bic.w	r3, r3, #4
 8000302:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOD){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a2e      	ldr	r2, [pc, #184]	@ (80003c0 <GPIO_PClk_Control+0x1e8>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d105      	bne.n	8000318 <GPIO_PClk_Control+0x140>
					GPIOD_PCLK_DI();
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a28      	ldr	r2, [pc, #160]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000312:	f023 0308 	bic.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOE){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a2a      	ldr	r2, [pc, #168]	@ (80003c4 <GPIO_PClk_Control+0x1ec>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d105      	bne.n	800032c <GPIO_PClk_Control+0x154>
					GPIOE_PCLK_DI();
 8000320:	4b24      	ldr	r3, [pc, #144]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a23      	ldr	r2, [pc, #140]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOF){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a26      	ldr	r2, [pc, #152]	@ (80003c8 <GPIO_PClk_Control+0x1f0>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d105      	bne.n	8000340 <GPIO_PClk_Control+0x168>
					GPIOF_PCLK_DI();
 8000334:	4b1f      	ldr	r3, [pc, #124]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000338:	4a1e      	ldr	r2, [pc, #120]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800033a:	f023 0320 	bic.w	r3, r3, #32
 800033e:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOG){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a22      	ldr	r2, [pc, #136]	@ (80003cc <GPIO_PClk_Control+0x1f4>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d105      	bne.n	8000354 <GPIO_PClk_Control+0x17c>
					GPIOG_PCLK_DI();
 8000348:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800034e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOH){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a1e      	ldr	r2, [pc, #120]	@ (80003d0 <GPIO_PClk_Control+0x1f8>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d105      	bne.n	8000368 <GPIO_PClk_Control+0x190>
					GPIOH_PCLK_DI();
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOI){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a1a      	ldr	r2, [pc, #104]	@ (80003d4 <GPIO_PClk_Control+0x1fc>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d105      	bne.n	800037c <GPIO_PClk_Control+0x1a4>
					GPIOI_PCLK_DI();
 8000370:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000374:	4a0f      	ldr	r2, [pc, #60]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000376:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800037a:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOJ){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a16      	ldr	r2, [pc, #88]	@ (80003d8 <GPIO_PClk_Control+0x200>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d105      	bne.n	8000390 <GPIO_PClk_Control+0x1b8>
					GPIOJ_PCLK_DI();
 8000384:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800038a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
		if(pGPIOx==GPIOK){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a12      	ldr	r2, [pc, #72]	@ (80003dc <GPIO_PClk_Control+0x204>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d105      	bne.n	80003a4 <GPIO_PClk_Control+0x1cc>
					GPIOK_PCLK_DI();
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <GPIO_PClk_Control+0x1dc>)
 800039e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40020000 	.word	0x40020000
 80003b4:	40023800 	.word	0x40023800
 80003b8:	40020400 	.word	0x40020400
 80003bc:	40020800 	.word	0x40020800
 80003c0:	40020c00 	.word	0x40020c00
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40021400 	.word	0x40021400
 80003cc:	40021800 	.word	0x40021800
 80003d0:	40021c00 	.word	0x40021c00
 80003d4:	40022000 	.word	0x40022000
 80003d8:	40022400 	.word	0x40022400
 80003dc:	40022800 	.word	0x40022800

080003e0 <GPIO_Init>:
///////////////////////////////////////////////////////////////////////

////////////// Initialization of GPIO_Init ////////////////
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	GPIO_PClk_Control(pGPIO_Handle->pGPIOx, ENABLE);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff fef2 	bl	80001d8 <GPIO_PClk_Control>

	uint32_t temp=0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
	//configure the mode of gpio pin
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode<GPIO_MODE_AN){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d822      	bhi.n	8000446 <GPIO_Init+0x66>
		temp=((pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber )));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	461a      	mov	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER &= ~(0x3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	2103      	movs	r1, #3
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	4619      	mov	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	400a      	ands	r2, r1
 800042e:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= temp;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6819      	ldr	r1, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	430a      	orrs	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
		temp=0;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	e0cb      	b.n	80005de <GPIO_Init+0x1fe>
	}else{
		if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_FT){
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	795b      	ldrb	r3, [r3, #5]
 800044a:	2b04      	cmp	r3, #4
 800044c:	d117      	bne.n	800047e <GPIO_Init+0x9e>
			//setting FTSR;
			EXTI->FTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	4b4e      	ldr	r3, [pc, #312]	@ (8000588 <GPIO_Init+0x1a8>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	7912      	ldrb	r2, [r2, #4]
 8000456:	4611      	mov	r1, r2
 8000458:	2201      	movs	r2, #1
 800045a:	408a      	lsls	r2, r1
 800045c:	4611      	mov	r1, r2
 800045e:	4a4a      	ldr	r2, [pc, #296]	@ (8000588 <GPIO_Init+0x1a8>)
 8000460:	430b      	orrs	r3, r1
 8000462:	60d3      	str	r3, [r2, #12]
			//clearing RTSR;
			EXTI->RTSR &= ~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000464:	4b48      	ldr	r3, [pc, #288]	@ (8000588 <GPIO_Init+0x1a8>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7912      	ldrb	r2, [r2, #4]
 800046c:	4611      	mov	r1, r2
 800046e:	2201      	movs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	43d2      	mvns	r2, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a44      	ldr	r2, [pc, #272]	@ (8000588 <GPIO_Init+0x1a8>)
 8000478:	400b      	ands	r3, r1
 800047a:	6093      	str	r3, [r2, #8]
 800047c:	e035      	b.n	80004ea <GPIO_Init+0x10a>
		}else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_RT){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	795b      	ldrb	r3, [r3, #5]
 8000482:	2b05      	cmp	r3, #5
 8000484:	d117      	bne.n	80004b6 <GPIO_Init+0xd6>
			EXTI->RTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	4b40      	ldr	r3, [pc, #256]	@ (8000588 <GPIO_Init+0x1a8>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7912      	ldrb	r2, [r2, #4]
 800048e:	4611      	mov	r1, r2
 8000490:	2201      	movs	r2, #1
 8000492:	408a      	lsls	r2, r1
 8000494:	4611      	mov	r1, r2
 8000496:	4a3c      	ldr	r2, [pc, #240]	@ (8000588 <GPIO_Init+0x1a8>)
 8000498:	430b      	orrs	r3, r1
 800049a:	6093      	str	r3, [r2, #8]
			//clearing RTSR;
			EXTI->FTSR &= ~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	4b3a      	ldr	r3, [pc, #232]	@ (8000588 <GPIO_Init+0x1a8>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a36      	ldr	r2, [pc, #216]	@ (8000588 <GPIO_Init+0x1a8>)
 80004b0:	400b      	ands	r3, r1
 80004b2:	60d3      	str	r3, [r2, #12]
 80004b4:	e019      	b.n	80004ea <GPIO_Init+0x10a>
		}else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_FRT){
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b06      	cmp	r3, #6
 80004bc:	d115      	bne.n	80004ea <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <GPIO_Init+0x1a8>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a2e      	ldr	r2, [pc, #184]	@ (8000588 <GPIO_Init+0x1a8>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
			//clearing RTSR;
			EXTI->RTSR |= (1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <GPIO_Init+0x1a8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a28      	ldr	r2, [pc, #160]	@ (8000588 <GPIO_Init+0x1a8>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
		}
		//configure GPIO port selection in SYSCFG_EXITCR
		uint8_t temp1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber/4;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	089b      	lsrs	r3, r3, #2
 80004f0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber%4;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	f003 0303 	and.w	r3, r3, #3
 80004fa:	74bb      	strb	r3, [r7, #18]
		SYSCFG_PCLK_EN();
 80004fc:	4b23      	ldr	r3, [pc, #140]	@ (800058c <GPIO_Init+0x1ac>)
 80004fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000500:	4a22      	ldr	r2, [pc, #136]	@ (800058c <GPIO_Init+0x1ac>)
 8000502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000506:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1]=(portCode(pGPIO_Handle->pGPIOx) << (temp2*4));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a20      	ldr	r2, [pc, #128]	@ (8000590 <GPIO_Init+0x1b0>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d050      	beq.n	80005b4 <GPIO_Init+0x1d4>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1f      	ldr	r2, [pc, #124]	@ (8000594 <GPIO_Init+0x1b4>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d032      	beq.n	8000582 <GPIO_Init+0x1a2>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	@ (8000598 <GPIO_Init+0x1b8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d02b      	beq.n	800057e <GPIO_Init+0x19e>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a1c      	ldr	r2, [pc, #112]	@ (800059c <GPIO_Init+0x1bc>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d024      	beq.n	800057a <GPIO_Init+0x19a>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <GPIO_Init+0x1c0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d01d      	beq.n	8000576 <GPIO_Init+0x196>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a19      	ldr	r2, [pc, #100]	@ (80005a4 <GPIO_Init+0x1c4>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d016      	beq.n	8000572 <GPIO_Init+0x192>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <GPIO_Init+0x1c8>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d00f      	beq.n	800056e <GPIO_Init+0x18e>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <GPIO_Init+0x1cc>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d008      	beq.n	800056a <GPIO_Init+0x18a>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <GPIO_Init+0x1d0>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <GPIO_Init+0x186>
 8000562:	2308      	movs	r3, #8
 8000564:	e027      	b.n	80005b6 <GPIO_Init+0x1d6>
 8000566:	2300      	movs	r3, #0
 8000568:	e025      	b.n	80005b6 <GPIO_Init+0x1d6>
 800056a:	2307      	movs	r3, #7
 800056c:	e023      	b.n	80005b6 <GPIO_Init+0x1d6>
 800056e:	2306      	movs	r3, #6
 8000570:	e021      	b.n	80005b6 <GPIO_Init+0x1d6>
 8000572:	2305      	movs	r3, #5
 8000574:	e01f      	b.n	80005b6 <GPIO_Init+0x1d6>
 8000576:	2304      	movs	r3, #4
 8000578:	e01d      	b.n	80005b6 <GPIO_Init+0x1d6>
 800057a:	2303      	movs	r3, #3
 800057c:	e01b      	b.n	80005b6 <GPIO_Init+0x1d6>
 800057e:	2302      	movs	r3, #2
 8000580:	e019      	b.n	80005b6 <GPIO_Init+0x1d6>
 8000582:	2301      	movs	r3, #1
 8000584:	e017      	b.n	80005b6 <GPIO_Init+0x1d6>
 8000586:	bf00      	nop
 8000588:	40013c00 	.word	0x40013c00
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000
 8000594:	40020400 	.word	0x40020400
 8000598:	40020800 	.word	0x40020800
 800059c:	40020c00 	.word	0x40020c00
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40021400 	.word	0x40021400
 80005a8:	40021800 	.word	0x40021800
 80005ac:	40021c00 	.word	0x40021c00
 80005b0:	40022000 	.word	0x40022000
 80005b4:	2300      	movs	r3, #0
 80005b6:	7cba      	ldrb	r2, [r7, #18]
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	fa03 f102 	lsl.w	r1, r3, r2
 80005be:	4a57      	ldr	r2, [pc, #348]	@ (800071c <GPIO_Init+0x33c>)
 80005c0:	7cfb      	ldrb	r3, [r7, #19]
 80005c2:	3302      	adds	r3, #2
 80005c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005c8:	4b55      	ldr	r3, [pc, #340]	@ (8000720 <GPIO_Init+0x340>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a51      	ldr	r2, [pc, #324]	@ (8000720 <GPIO_Init+0x340>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	6013      	str	r3, [r2, #0]
	}
	//configure the speed
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	799b      	ldrb	r3, [r3, #6]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	2103      	movs	r1, #3
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	400a      	ands	r2, r1
 800060c:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6899      	ldr	r1, [r3, #8]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	430a      	orrs	r2, r1
 800061c:	609a      	str	r2, [r3, #8]
	temp=0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

	//configure the pupd setting
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68da      	ldr	r2, [r3, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	2103      	movs	r1, #3
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	400a      	ands	r2, r1
 8000650:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	68d9      	ldr	r1, [r3, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	430a      	orrs	r2, r1
 8000660:	60da      	str	r2, [r3, #12]
	temp=0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
	//configure the optype
	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7a1b      	ldrb	r3, [r3, #8]
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OTYPER &= ~(0x1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	4619      	mov	r1, r3
 8000682:	2301      	movs	r3, #1
 8000684:	408b      	lsls	r3, r1
 8000686:	43db      	mvns	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	400a      	ands	r2, r1
 8000690:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= temp;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6859      	ldr	r1, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	430a      	orrs	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
	temp=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
	//configure the alt functionality
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_AF){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7a5b      	ldrb	r3, [r3, #9]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d132      	bne.n	8000714 <GPIO_Init+0x334>
		uint32_t temp1,temp2;
		temp1=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	60fb      	str	r3, [r7, #12]
		temp2=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	f003 0307 	and.w	r3, r3, #7
 80006c0:	60bb      	str	r3, [r7, #8]
		pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xf << (4*temp2));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	3208      	adds	r2, #8
 80006ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	210f      	movs	r1, #15
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4011      	ands	r1, r2
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	3208      	adds	r2, #8
 80006e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[temp1] |= ((pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4* temp2));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	3208      	adds	r2, #8
 80006f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7a5b      	ldrb	r3, [r3, #9]
 80006fa:	4619      	mov	r1, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4311      	orrs	r1, r2
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	3208      	adds	r2, #8
 8000710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013800 	.word	0x40013800
 8000720:	40013c00 	.word	0x40013c00

08000724 <GPIO_ReadFromInputPin>:
	}
}
//////////////////////////////////////////////////////////////////////
/*Function implementation to read input from pin
 * */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t pinNumber){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
	return((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691a      	ldr	r2, [r3, #16]
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	fa22 f303 	lsr.w	r3, r2, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3

}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <GPIO_ToggleOutputPin>:
}
/////////////////////////////////////////////////////

/*Function implementation to Toggle the specific output Pin
 * */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t pinNumber){
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^=(1 << pinNumber);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	405a      	eors	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	615a      	str	r2, [r3, #20]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <USART_PeriClockControl>:
#include "stm32f407xx_usart_driver.h"

/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi){
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d041      	beq.n	800080e <USART_PeriClockControl+0x96>
		if(pUSARTx==USART1){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a43      	ldr	r2, [pc, #268]	@ (800089c <USART_PeriClockControl+0x124>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000792:	4b43      	ldr	r3, [pc, #268]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	4a42      	ldr	r2, [pc, #264]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6453      	str	r3, [r2, #68]	@ 0x44
			USART5_PCLK_DI();
		}else if(pUSARTx==USART6){
			USART6_PCLK_DI();
		}
	}
}
 800079e:	e077      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART2){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a40      	ldr	r2, [pc, #256]	@ (80008a4 <USART_PeriClockControl+0x12c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80007a8:	4b3d      	ldr	r3, [pc, #244]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a3c      	ldr	r2, [pc, #240]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007b4:	e06c      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART3){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a3b      	ldr	r2, [pc, #236]	@ (80008a8 <USART_PeriClockControl+0x130>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d106      	bne.n	80007cc <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a37      	ldr	r2, [pc, #220]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007ca:	e061      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART4){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a37      	ldr	r2, [pc, #220]	@ (80008ac <USART_PeriClockControl+0x134>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <USART_PeriClockControl+0x6a>
			USART4_PCLK_EN();
 80007d4:	4b32      	ldr	r3, [pc, #200]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a31      	ldr	r2, [pc, #196]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007e0:	e056      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART5){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a32      	ldr	r2, [pc, #200]	@ (80008b0 <USART_PeriClockControl+0x138>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <USART_PeriClockControl+0x80>
			USART5_PCLK_EN();
 80007ea:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a2c      	ldr	r2, [pc, #176]	@ (80008a0 <USART_PeriClockControl+0x128>)
 80007f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007f6:	e04b      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART6){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a2e      	ldr	r2, [pc, #184]	@ (80008b4 <USART_PeriClockControl+0x13c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d147      	bne.n	8000890 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000804:	4a26      	ldr	r2, [pc, #152]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000806:	f043 0320 	orr.w	r3, r3, #32
 800080a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800080c:	e040      	b.n	8000890 <USART_PeriClockControl+0x118>
		if(pUSARTx==USART1){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a22      	ldr	r2, [pc, #136]	@ (800089c <USART_PeriClockControl+0x124>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000816:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <USART_PeriClockControl+0x128>)
 800081c:	f023 0310 	bic.w	r3, r3, #16
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000822:	e035      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART2){
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a1f      	ldr	r2, [pc, #124]	@ (80008a4 <USART_PeriClockControl+0x12c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <USART_PeriClockControl+0x128>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000832:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000836:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000838:	e02a      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART3){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a1a      	ldr	r2, [pc, #104]	@ (80008a8 <USART_PeriClockControl+0x130>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a16      	ldr	r2, [pc, #88]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000848:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800084e:	e01f      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART4){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <USART_PeriClockControl+0x134>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <USART_PeriClockControl+0xee>
			USART4_PCLK_DI();
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <USART_PeriClockControl+0x128>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <USART_PeriClockControl+0x128>)
 800085e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000864:	e014      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART5){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <USART_PeriClockControl+0x138>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <USART_PeriClockControl+0x104>
			USART5_PCLK_DI();
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a0b      	ldr	r2, [pc, #44]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000874:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800087a:	e009      	b.n	8000890 <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART6){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <USART_PeriClockControl+0x13c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d105      	bne.n	8000890 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <USART_PeriClockControl+0x128>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000888:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <USART_PeriClockControl+0x128>)
 800088a:	f023 0320 	bic.w	r3, r3, #32
 800088e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40011000 	.word	0x40011000
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40004800 	.word	0x40004800
 80008ac:	40004c00 	.word	0x40004c00
 80008b0:	40005000 	.word	0x40005000
 80008b4:	40011400 	.word	0x40011400

080008b8 <USART_Init>:
/*
 * Init and De-init
 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	//Temporary variable
		uint32_t tempreg=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

		//Implement the code to enable the Clock for given USART peripheral
		 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff54 	bl	8000778 <USART_PeriClockControl>

		//Enable USART Tx and Rx engines according to the USART_Mode configuration item
		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d104      	bne.n	80008e2 <USART_Init+0x2a>
		{
			//Implement the code to enable the Receiver bit field
			tempreg|= (1 << USART_CR1_RE);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e010      	b.n	8000904 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d104      	bne.n	80008f4 <USART_Init+0x3c>
		{
			//Implement the code to enable the Transmitter bit field
			tempreg |= ( 1 << USART_CR1_TE);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e007      	b.n	8000904 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d103      	bne.n	8000904 <USART_Init+0x4c>
		{
			//Implement the code to enable the both Transmitter and Receiver bit fields
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f043 030c 	orr.w	r3, r3, #12
 8000902:	60fb      	str	r3, [r7, #12]
		}

	    //Implement the code to configure the Word length configuration item
		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b5b      	ldrb	r3, [r3, #13]
 8000908:	031b      	lsls	r3, r3, #12
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4313      	orrs	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]


	    //Configuration of parity control bit fields
		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7b9b      	ldrb	r3, [r3, #14]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d104      	bne.n	8000922 <USART_Init+0x6a>
		{
			//Implement the code to enale the parity control
			tempreg |= ( 1 << USART_CR1_PCE);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00b      	b.n	800093a <USART_Init+0x82>

			//Implement the code to enable EVEN parity
			//Not required because by default EVEN parity will be selected once you enable the parity control

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7b9b      	ldrb	r3, [r3, #14]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d107      	bne.n	800093a <USART_Init+0x82>
		{
			//Implement the code to enable the parity control
		    tempreg |= ( 1 << USART_CR1_PCE);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000930:	60fb      	str	r3, [r7, #12]

		    //Implement the code to enable ODD parity
		    tempreg |= ( 1 << USART_CR1_PS);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000938:	60fb      	str	r3, [r7, #12]

		}

	   //Program the CR1 register
		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

		tempreg=0;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]

		//Implement the code to configure the number of stop bits inserted during USART frame transmission
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7b1b      	ldrb	r3, [r3, #12]
 800094a:	031b      	lsls	r3, r3, #12
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]

		//Program the CR2 register
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

		tempreg=0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]

		//Configuration of USART hardware flow control
		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7bdb      	ldrb	r3, [r3, #15]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d104      	bne.n	8000970 <USART_Init+0xb8>
		{
			//Implement the code to enable CTS flow control
			tempreg |= ( 1 << USART_CR3_CTSE);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e010      	b.n	8000992 <USART_Init+0xda>


		}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7bdb      	ldrb	r3, [r3, #15]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d104      	bne.n	8000982 <USART_Init+0xca>
		{
			//Implement the code to enable RTS flow control
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e007      	b.n	8000992 <USART_Init+0xda>

		}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7bdb      	ldrb	r3, [r3, #15]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d103      	bne.n	8000992 <USART_Init+0xda>
		{
			//Implement the code to enable both CTS and RTS Flow control
			tempreg |= (( 1 << USART_CR3_RTSE) | ( 1 << USART_CR3_CTSE));
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000990:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	615a      	str	r2, [r3, #20]
	/******************************** Configuration of BRR(Baudrate register)******************************************/

		//Implement the code to configure the baud rate
		//We will cover this in the lecture. No action required here

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e031      	b.n	8000a18 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80009b4:	bf00      	nop
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2180      	movs	r1, #128	@ 0x80
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f83e 	bl	8000a3e <USART_GetFlagStatus>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f6      	beq.n	80009b6 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	7b5b      	ldrb	r3, [r3, #13]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d118      	bne.n	8000a02 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009e2:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	7b9b      	ldrb	r3, [r3, #14]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	e00b      	b.n	8000a12 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	3301      	adds	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	e007      	b.n	8000a12 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d3c9      	bcc.n	80009b4 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000a20:	bf00      	nop
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2140      	movs	r1, #64	@ 0x40
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f808 	bl	8000a3e <USART_GetFlagStatus>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f6      	beq.n	8000a22 <USART_SendData+0x80>
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <USART_GetFlagStatus>:

/*
 * Other Peripheral Control APIs
 */

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName){
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName){
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <USART_GetFlagStatus+0x1c>
			return FLAG_SET;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <USART_GetFlagStatus+0x1e>
		}
		return FLAG_RESET;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <USART_PeripheralControl>:
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName);
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi){
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60da      	str	r2, [r3, #12]
	}else {
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000a86:	e005      	b.n	8000a94 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <USART4_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart4_handle; //i'm using USART4 on the stm32f4 discovery

void USART4_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	usart4_handle.pUSARTx = USART4;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <USART4_Init+0x3c>)
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae0 <USART4_Init+0x40>)
 8000aa8:	601a      	str	r2, [r3, #0]
	usart4_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <USART4_Init+0x3c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	609a      	str	r2, [r3, #8]
	usart4_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <USART4_Init+0x3c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	73da      	strb	r2, [r3, #15]
	usart4_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <USART4_Init+0x3c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	711a      	strb	r2, [r3, #4]
	usart4_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <USART4_Init+0x3c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	731a      	strb	r2, [r3, #12]
	usart4_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <USART4_Init+0x3c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	735a      	strb	r2, [r3, #13]
	usart4_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <USART4_Init+0x3c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart4_handle);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <USART4_Init+0x3c>)
 8000ad2:	f7ff fef1 	bl	80008b8 <USART_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000041c 	.word	0x2000041c
 8000ae0:	40004c00 	.word	0x40004c00

08000ae4 <USART4_GPIOInit>:

void USART4_GPIOInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <USART4_GPIOInit+0x40>)
 8000aec:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000aee:	2302      	movs	r3, #2
 8000af0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_PP;
 8000af2:	2300      	movs	r3, #0
 8000af4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PINR_NO_PUPD;
 8000af6:	2300      	movs	r3, #0
 8000af8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000afa:	2302      	movs	r3, #2
 8000afc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =8;
 8000afe:	2308      	movs	r3, #8
 8000b00:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc69 	bl	80003e0 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc63 	bl	80003e0 <GPIO_Init>


}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40020000 	.word	0x40020000

08000b28 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <GPIO_ButtonInit+0x4c>)
 8000b30:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000b36:	2300      	movs	r3, #0
 8000b38:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PINR_NO_PUPD;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fc4a 	bl	80003e0 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <GPIO_ButtonInit+0x50>)
 8000b4e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000b50:	230c      	movs	r3, #12
 8000b52:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_PP;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PINR_NO_PUPD;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71fb      	strb	r3, [r7, #7]

	//GPIO_PClk_Control(GPIOD,ENABLE);


	GPIO_Init(&GpioLed);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc3a 	bl	80003e0 <GPIO_Init>

}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <delay>:

void delay(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	e002      	b.n	8000b8e <delay+0x12>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <delay+0x28>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d9f8      	bls.n	8000b88 <delay+0xc>
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	0003d08f 	.word	0x0003d08f

08000ba8 <main>:


int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000bac:	f7ff ffbc 	bl	8000b28 <GPIO_ButtonInit>

	USART4_GPIOInit();
 8000bb0:	f7ff ff98 	bl	8000ae4 <USART4_GPIOInit>

    USART4_Init();
 8000bb4:	f7ff ff74 	bl	8000aa0 <USART4_Init>

    USART_PeripheralControl(USART4,ENABLE);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <main+0x4c>)
 8000bbc:	f7ff ff54 	bl	8000a68 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) ){
 8000bc0:	e005      	b.n	8000bce <main+0x26>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000bc2:	210c      	movs	r1, #12
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <main+0x50>)
 8000bc6:	f7ff fdc2 	bl	800074e <GPIO_ToggleOutputPin>
			delay();
 8000bca:	f7ff ffd7 	bl	8000b7c <delay>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) ){
 8000bce:	2100      	movs	r1, #0
 8000bd0:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <main+0x54>)
 8000bd2:	f7ff fda7 	bl	8000724 <GPIO_ReadFromInputPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f2      	beq.n	8000bc2 <main+0x1a>
		}


		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000bdc:	f7ff ffce 	bl	8000b7c <delay>

		USART_SendData(&usart4_handle,(uint8_t*)msg,strlen(msg));
 8000be0:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <main+0x58>)
 8000be2:	f7ff faf1 	bl	80001c8 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4905      	ldr	r1, [pc, #20]	@ (8000c00 <main+0x58>)
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <main+0x5c>)
 8000bee:	f7ff fed8 	bl	80009a2 <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) ){
 8000bf2:	e7ec      	b.n	8000bce <main+0x26>
 8000bf4:	40004c00 	.word	0x40004c00
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	20000000 	.word	0x20000000
 8000c04:	2000041c 	.word	0x2000041c

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c36:	f000 f811 	bl	8000c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff ffb5 	bl	8000ba8 <main>

08000c3e <LoopForever>:

LoopForever:
  b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8000c4c:	08000ccc 	.word	0x08000ccc
  ldr r2, =_sbss
 8000c50:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8000c54:	20000440 	.word	0x20000440

08000c58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <__libc_init_array>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000c94 <__libc_init_array+0x38>)
 8000c60:	4c0d      	ldr	r4, [pc, #52]	@ (8000c98 <__libc_init_array+0x3c>)
 8000c62:	1b64      	subs	r4, r4, r5
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	2600      	movs	r6, #0
 8000c68:	42a6      	cmp	r6, r4
 8000c6a:	d109      	bne.n	8000c80 <__libc_init_array+0x24>
 8000c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000c9c <__libc_init_array+0x40>)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ca0 <__libc_init_array+0x44>)
 8000c70:	f000 f818 	bl	8000ca4 <_init>
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	2600      	movs	r6, #0
 8000c7a:	42a6      	cmp	r6, r4
 8000c7c:	d105      	bne.n	8000c8a <__libc_init_array+0x2e>
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
 8000c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c84:	4798      	blx	r3
 8000c86:	3601      	adds	r6, #1
 8000c88:	e7ee      	b.n	8000c68 <__libc_init_array+0xc>
 8000c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8e:	4798      	blx	r3
 8000c90:	3601      	adds	r6, #1
 8000c92:	e7f2      	b.n	8000c7a <__libc_init_array+0x1e>
 8000c94:	08000cc4 	.word	0x08000cc4
 8000c98:	08000cc4 	.word	0x08000cc4
 8000c9c:	08000cc4 	.word	0x08000cc4
 8000ca0:	08000cc8 	.word	0x08000cc8

08000ca4 <_init>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr

08000cb0 <_fini>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	bf00      	nop
 8000cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb6:	bc08      	pop	{r3}
 8000cb8:	469e      	mov	lr, r3
 8000cba:	4770      	bx	lr
